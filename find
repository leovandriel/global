#!/usr/bin/env python3

from datetime import datetime
import json
import sys
import time
import urllib.request
from twilio.rest import Client

account_sid = None
service_sid = None
auth_token = None
recipient_phone = None
appointment_stamp = None
progress_indicator = '/-\\|'
poll_interval = 61
text_uniquer = set()

with open('.config', 'r') as file:
    config = json.loads(file.read())
    auth_token = config['auth_token']
    account_sid = config['account_sid']
    service_sid = config['service_sid']
    recipient_phone = config['recipient_phone']
    appointment_stamp = config['appointment_stamp']

def parse_date(stamp):
    return datetime.strptime(stamp, '%Y-%m-%dT%H:%M')

def fetch_json(url):
    with urllib.request.urlopen(url) as response:
        return json.loads(response.read())

def send_text(text):
    print(text)
    if text in text_uniquer:
        return
    text_uniquer.add(text)
    client = Client(account_sid, auth_token)
    message = client.messages.create(messaging_service_sid=service_sid, body=text, to=recipient_phone)
    return message.sid

def fetch_soonest():
    url = 'https://ttp.cbp.dhs.gov/schedulerapi/slots?orderBy=soonest&limit=1&locationId=5446&minimum=1'
    result = fetch_json(url)
    stamp = result[0]['startTimestamp']
    date = parse_date(stamp)
    return date

def fetch_soonest2():
    today = datetime.now().isoformat()[0:19]
    url = f'https://ttp.cbp.dhs.gov/schedulerapi/locations/5446/slots?startTimestamp={today}&endTimestamp={appointment_stamp}'
    result = fetch_json(url)
    active = [item for item in result if item['active'] > 0]
    if len(active) > 0:
        stamp = active[0]['timestamp']
        date = parse_date(stamp)
        return stamp

def poll_soonest():
    soonest = fetch_soonest()
    appointment = parse_date(appointment_stamp)
    diff = appointment - soonest
    if diff.days > 0:
        message = f'found earlier appointment! {diff.days} days earlier, on {soonest}'
        send_text(message)
    soonest2 = fetch_soonest2()
    if soonest2 is not None:
        print(f'confirming on {soonest2}')
    return soonest

def write_stat(file, date):
    now = datetime.now()
    delta = (date - now).total_seconds() / 86400
    file.write(f'{now.isoformat()[0:22]},{date.isoformat()[0:22]},{delta:.1f}\n')
    file.flush()

def loop():
    print(f'looking for appointments before {appointment_stamp}')
    i = 0
    with open('soonest.csv', 'a') as file:
        while True:
            print(f'{progress_indicator[i % 4]}\r', end='', file=sys.stderr, flush=True)
            date = poll_soonest()
            write_stat(file, date)
            time.sleep(poll_interval)
            if i % 1000 == 0:
                send_text(f'running for {i} polls')
            i += 1

if __name__ == '__main__':
    loop()

